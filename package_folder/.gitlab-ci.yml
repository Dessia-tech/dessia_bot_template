# Gitlab CI configuration file for the package.
# You can use your own specific runner tags and images by changing the values in the tags and image fields

stages:
  - verify
  - check
  - test
  - review
  - build


# Verify that the changelog has been updated
verify_changelog_update:
  stage: verify
  tags:
    - dessia_ubuntu
  image: python:3.9
  script:
    - git remote set-url origin $CI_REPOSITORY_URL
    - if [ "$(git rev-parse --is-shallow-repository)" = "true" ]; then
        git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME --unshallow;
      else
        git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME;
      fi
    - git fetch origin $CI_COMMIT_REF_NAME
    - if git diff --name-only origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME...origin/$CI_COMMIT_REF_NAME | grep -q 'CHANGELOG.md'; then echo "Changelog has been updated"; else echo "CHANGELOG.md has not been updated. Update it for the PR to be accepted in CI."; exit 1; fi
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'


# Check pre-commit hooks
check_pre_commit:
  stage: check
  tags:
    - dessia_ubuntu
  image: python:3.9
  script:
    - pip install pre-commit shellcheck-py
    - pre-commit run -a
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'


# Test the package with unittests and run scripts, and generate coverage report
install_run_scripts_and_unittests:
  stage: test
  tags:
    - dessia_ubuntu
  image: python:3.9
  script:
    - git fetch --tags
    - apt-get update && apt-get install -y libgl1
    - python3 -m pip install --upgrade pip
    - pip install git+https://github.com/Dessia-tech/dessia_common.git
    - pip install git+https://gitlab-ci-token:$CI_JOB_TOKEN@gitlab.com/dessia/sdk/volmdlr.git
    - pip install -e .[doc,test]
    - pip install coverage tomli
    - python3 test.py
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'


# Check merge request approvals
check_mr_approval:
  stage: review
  image: alpine
  before_script:
    - apk add --no-cache curl jq
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  script: |-
    echo "Checking merge request approvals..."

    MR_ID=$CI_MERGE_REQUEST_IID
    echo "MR ID : $MR_ID"

    # Check if the pipeline is linked to a merge request
    if [ -z "$CI_MERGE_REQUEST_IID" ]; then
      echo "❌ Error: This pipeline is not linked to a merge request."
      exit 1
    fi

    # Check project ID and token permissions
    echo "Checking API access using project ID ($CI_PROJECT_ID)"

    # Check if the project is accessible
    PROJECT_INFO=$(curl --silent --header "PRIVATE-TOKEN: $MR_CHECK_TOKEN" \
      "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID")

    if [[ "$PROJECT_INFO" == *"404"* ]]; then
      echo "❌ Error 404: Project not found. Check token permissions."
      exit 1
    fi

    # Fetch merge request info
    MR_INFO=$(curl --silent --header "PRIVATE-TOKEN: $MR_CHECK_TOKEN" \
      "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/merge_requests/$MR_ID")

    MR_AUTHOR=$(echo "$MR_INFO" | jq -r '.author.username')

    # Fetch merge request approvals
    APPROVALS=$(curl --silent --header "PRIVATE-TOKEN: $MR_CHECK_TOKEN" \
      "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/merge_requests/$MR_ID/approvals")

    # Extract approval usernames
    APPROVERS=$(echo "$APPROVALS" | jq -r '.approved_by // [] | .[].user.username')

    echo "----------------------------------------"
    echo "Merge Request #$MR_ID"
    echo "Author        : $MR_AUTHOR"
    echo "Approved by   :"
    if [ -z "$APPROVERS" ]; then
      echo "  (no approval)"
    else
      echo "$APPROVERS" | sed 's/^/  - /'
    fi
    echo "----------------------------------------"

    # Check if approved by someone other than the author
    APPROVED=false
    for user in $APPROVERS; do
      if [ "$user" != "$MR_AUTHOR" ]; then
        APPROVED=true
      fi
    done

    if [ "$APPROVED" = false ]; then
      echo "❌ Error: Merge request must be approved by someone other than the author."
      exit 1
    else
      echo "✅ OK: Valid approval. Merge allowed."
    fi


# Generate dist wheel and source distribution on master branch
generate_dist_wheel:
  stage: build
  tags:
    - dessia_ubuntu
  image: python:3.9
  script:
    - pip install build
    - python -m build --wheel
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH == "testing"'
    - if: '$CI_COMMIT_TAG'
  artifacts:
    paths:
      - dist/*.whl
      - dist/*.tar.gz
